#include <iostream>
using namespace std;

//domeniul ales este sport

class Sala {
private:
	const int id;
	string nume;
	int nrAbonamente;
	float pret;
	char* zona;
	static bool sauna;
public:
	const int getID() {
		return id;
	}
	string getNume() {
		return nume;
	}
	int getNrAbonamente() {
		return nrAbonamente;
	}
	float getPret() {
		return pret;
	}
	char* getZona() {
		return this->zona;
	}
	static bool getSauna() {
		return sauna;
	}
	void setNume(string nume) {
		if (nume.length() > 2)
			this->nume = nume;
	}
	void setNrAbonamente(int nrAbonamente) {
		if (nrAbonamente > 1)
			this->nrAbonamente = nrAbonamente;
	}
	void setPret(float pret) {
		if (pret > 2)
			this->pret = pret;
	}
	void setZona(char* zona) {
		if (strlen(zona) > 1) {
			this->zona = new char[strlen(zona) + 1];
			strcpy_s(this->zona, strlen(zona) + 1, zona);
		}
	}
	Sala() : id(1) {
		this->nume = "18gym";
		this->nrAbonamente = 0;
		this->pret = 0;
		this->zona = new char[strlen("Berceni") + 1];
		strcpy_s(this->zona, strlen("Berceni") + 1, "Berceni");
	}
	Sala(int idNou, string nume) :id(idNou) {
		this->nume = nume;
		this->nrAbonamente = 700;
		this->pret = 500;
		this->zona = new char[strlen("Piata Unirii") + 1];
		strcpy_s(this->zona, strlen("Piata Unirii") + 1, "Piata Unirii");
	}

	Sala(int idNou, string numeNou, float pret) :id(idNou), nume(numeNou), pret(pret) {
		this->nrAbonamente = 250;
		this->zona = new char[strlen("Pipera") + 1];
		strcpy_s(this->zona, strlen("Pipera") + 1, "Pipera");
	}


	Sala(const Sala& s) : id(s.id) {
		this->nume = s.nume;
		this->nrAbonamente = s.nrAbonamente;
		this->pret = s.pret;
		this->zona = new char[strlen(s.zona) + 1];
		strcpy_s(this->zona, strlen(s.zona) + 1, s.zona);
	}

	Sala operator=(const Sala& s) {
		if (this != &s) {
			if (this->zona != NULL) {
				delete[]this->zona;
			}
			this->nume = s.nume;
			this->nrAbonamente = s.nrAbonamente;
			this->pret = s.pret;
			this->zona = new char[strlen(s.zona) + 1];
			strcpy_s(this->zona, strlen(s.zona) + 1, s.zona);
		}
		return *this;
	}

	static void setSauna() {
		cout << (sauna ? "Sala este dotata cu sauna." : "Sala nu este dotata cu sauna.") << endl;
	}

	~Sala() {
		if (this->zona != NULL) {
			delete[]this->zona;
		}
	}
	friend string getNumeSala2(Sala a);
	friend float getNrAbonamente2(Sala b);
	friend ostream& operator<<(ostream& out, const Sala& sala);
	friend istream& operator>>(istream& citeste, Sala& sala);

	Sala operator+ (const Sala& s) {
		Sala aux = *this;
		aux.nrAbonamente = this->nrAbonamente + s.nrAbonamente;
		return aux;
	}
};
bool Sala::sauna = true;
string getNumeSala2(Sala a) {
	if (a.nume == "World CLass") {
		cout << "Sala aleasa este ";
	}
	return a.nume;
}

float getNrAbonamente2(Sala b) {

	return b.nrAbonamente;

}

ostream& operator<<(ostream& out, const Sala& sala) {
	out << sala.id << ". Sala de fitness " << sala.nume << " se afla in zona " << sala.zona << ", pretul abonamentului este de  " << sala.pret << ", sala are " << sala.nrAbonamente << " abonamente active" << endl;
	out << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	return out;
}

istream& operator>>(istream& citeste, Sala& sala) {
	cout << "Nume: ";
	citeste >> sala.nume;
	cout << "Nr abonamente: ";
	citeste >> sala.nrAbonamente;
	cout << "Pret abonament: ";
	citeste >> sala.pret;
	if (sala.zona != NULL) {
		delete[]sala.zona;
	}
	sala.zona = new char[strlen(sala.zona) + 1];
	cout << "Zona: ";
	citeste >> sala.zona;
	return citeste;
}

class Scripete {

private:
	const int id;
	string culoare;
	float pret;
	int* kilograme;
	static string brand;

public:
	const int getID() {
		return id;
	}
	string getCuloare() {
		return culoare;
	}
	float getPret() {
		return pret;
	}
	int* getKilograme() {
		return this->kilograme;
	}
	static string getBrand() {
		return brand;
	}
	void setCuloare(string culoare) {
		if (culoare.length() > 2) {
			this->culoare = culoare;
		}
	}
	void setPret(float pret) {
		if (pret > 0)
			this->pret = pret;
	}
	void setKilograme(int* kilograme) {
		if (kilograme != NULL) {
			if (this->kilograme != NULL) {
				delete[]this->kilograme;
			}
			this->kilograme = new int[1];
			*this->kilograme = *kilograme;
		}
	}
	Scripete() :id(1) {
		this->culoare = "negru";
		this->pret = 1550;
		this->kilograme = NULL;
	}

	Scripete(int idNou, string culoare, float pret) :id(idNou) {
		this->culoare = culoare;
		this->pret = pret;
		this->kilograme = NULL;
	}

	Scripete(int idNou, string culoare, float pret, int* kilograme) :id(idNou), culoare(culoare), pret(pret) {
		if (pret) {
			this->kilograme = new int[1];
			*this->kilograme = *kilograme;
		}
	}
	Scripete(const Scripete& sr) :id(sr.id) {
		this->culoare = sr.culoare;
		this->pret = sr.pret;
		this->kilograme = new int[1];
		*this->kilograme = *kilograme;
	}

	Scripete operator=(const Scripete& sr) {
		if (this != &sr) {
			if (this->kilograme != NULL) {
				delete[]this->kilograme;
			}
			this->culoare = sr.culoare;
			this->pret = sr.pret;
			this->kilograme = new int[1];
			*this->kilograme = *sr.kilograme;
		}
		return*this;
	}

	static void schimbaBrand(string& brandNou) {
		brand = brandNou;
	}

	~Scripete() {
		if (this->kilograme != NULL) {
			delete[]this->kilograme;
		}
	}
	friend string getCuloareScripete2(Scripete a);
	friend float getPret2(Scripete b);
	friend ostream& operator<<(ostream& out, const Scripete& scripete);
	friend istream& operator>>(istream& mouse, Scripete& scripete);

	Scripete operator+(const Scripete& s) {
		Scripete aux = *this;
		aux.pret = this->pret + s.pret;
		return aux;
	}

};
string Scripete::brand = "Technogym";
string getCuloareScripete2(Scripete a) {
	if (a.culoare == "roz") {
		cout << "Culoarea aleasa este ";
	}
	return a.culoare;
}

float getPret2(Scripete b) {
	if (b.pret != NULL) {
		cout << "Scripetele costa ";
	}
	return b.pret;
}

istream& operator>>(istream& mouse, Scripete& scripete) {

	cout << "Culoarea: ";
	mouse >> scripete.culoare;
	if (scripete.kilograme != NULL) {
		delete[]scripete.kilograme;
	}

	scripete.kilograme = new int[1];
	cout << "Greutatea este ";
	mouse >> *scripete.kilograme;

	cout << "Scripetele costa ";
	mouse >> scripete.pret;
	return mouse;
}

ostream& operator<<(ostream& out, const Scripete& scripete) {
	out << scripete.id << ". Scripetele de la brandul " << scripete.brand << " este " << scripete.culoare << ". ";
	if (scripete.kilograme) {
		out << "Are o incarcatura de " << *scripete.kilograme << " kilograme. ";
	}
	else {
		out << "Scripetele nu vine la pachet cu greutati. ";
	}
	out << " Acest scripete costa " << scripete.pret << "." << endl;
	out << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	return out;
}


class Supliment {

private:
	const int id;
	string nume;
	float pret;
	int cantitate;
	char* producator;
	static int valabilitate;

public:

	int getID() {
		return id;
	}
	string getNume() {
		return nume;
	}
	float getPret() {
		return pret;
	}
	int getCant() {
		return cantitate;
	}
	char* getProducator() {
		return this->producator;
	}
	static int getValabilitate() {
		return valabilitate;
	}
	void setNume(string nume) {
		if (nume.length() > 2)
			this->nume = nume;
	}

	void setPret(float pret) {
		if (pret > 0)
			this->pret = pret;
	}
	void setCant(int cant) {
		if (cant > 0)
			this->cantitate = cant;
	}

	void setProducator(char* producator) {
		if (strlen(producator) > 0) {
			this->producator = new char[strlen(producator) + 1];
			strcpy_s(this->producator, strlen(producator) + 1, producator);
		}
	}


	Supliment() :id(1) {
		this->nume = "Proteina";
		this->pret = 300;
		this->cantitate = 1000;
		this->producator = new char[strlen("Myprotein") + 1];
		strcpy_s(this->producator, strlen("Myprotein") + 1, "Myprotein");
	}

	Supliment(int idNou, float pret) :id(idNou), pret(pret) {
		this->nume = "Creatina";
		this->cantitate = 500;
		this->producator = new char[strlen("Gymbeam") + 1];
		strcpy_s(this->producator, strlen("Gymbeam") + 1, "Gymbeam");
	}

	Supliment(int idNou, float pret, string nume, char* producator) : id(idNou), pret(pret), nume(nume) {
		this->cantitate = 800;
		this->producator = new char[strlen(producator) + 1];
		strcpy_s(this->producator, strlen(producator) + 1, producator);
	}

	Supliment(const Supliment& su) :id(su.id) {
		this->nume = su.nume;
		this->pret = su.pret;
		this->cantitate = su.cantitate;
		this->producator = new char[strlen(su.producator) + 1];
		strcpy_s(this->producator, strlen(su.producator) + 1, su.producator);
	}

	Supliment operator=(const Supliment& su) {
		if (this != &su) {
			if (producator != NULL) {
				delete[]this->producator;
			}
			this->nume = su.nume;
			this->pret = su.pret;
			this->cantitate = su.cantitate;
			this->producator = new char[strlen(su.producator) + 1];
			strcpy_s(this->producator, strlen(su.producator) + 1, su.producator);
		}
		return*this;
	}


	static void setValabilitate(int vNou) {
		valabilitate = vNou;
	}
	char& operator[](int index) {
		return this->producator[index];
	}

	~Supliment() {
		if (producator != NULL) {
			delete[]this->producator;
		}
	}
	friend string getNume2(Supliment a);
	friend int getCantitate2(Supliment b);
	friend ostream& operator<<(ostream& out, const Supliment& supliment) {
		out << supliment.id << "." << supliment.nume << " de la " << supliment.producator << " costa " << supliment.pret << "lei, cantitate " << supliment.cantitate << " grame, iar termenul de valabilitate este de " << supliment.valabilitate << " de zile." << endl;
		out << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
		return out;
	}
	friend istream& operator>>(istream& citire, Supliment& supliment) {
		cout << "Nume:";
		citire >> supliment.nume;
		cout << "Pret: ";
		citire >> supliment.pret;
		cout << "Cantitate: ";
		citire >> supliment.cantitate;
		if (supliment.producator != NULL) {
			delete[]supliment.producator;
		}
		supliment.producator = new char[strlen(supliment.producator) + 1];
		cout << "Producator: ";
		citire >> supliment.producator;
		return citire;
	}
};
int Supliment::valabilitate = 30;
string getNume2(Supliment a) {
	if (a.nume == "creatina") {
		cout << "Suplimentul ales este ";
	}
	return a.nume;
}

int getCantitate2(Supliment b) {
	if (b.cantitate != NULL) {
		cout << "Produsul vine in cantitate de ";
	}
	return b.cantitate;
}


void main() {

	char* zona = new char(strlen("Constanta") + 1);
	strcpy_s(zona, strlen("Constanta") + 1, "Constanta");
	Sala sala1;
	Sala sala2(2, "World Class");
	Sala sala3(3, "Inmotion Fitness", 155.9);
	Sala sala4 = sala3; //constructor copiere
	Sala sala5;
	Sala sala6;
	Sala::setSauna();
	sala6 = sala2; //operator=
	cin >> sala5;  //operator>>
	sala1 = sala2 + sala3;  //operator +
	cout << "Afisarea salii 2 " << endl << sala2;
	cout << "Afisarea salii 3 " << endl << sala3;  //operator <<
	cout << "Afisarea salii 4 " << endl << sala4;
	cout << "Afisarea salii 5 " << endl << sala5;
	cout << "Afisarea salii 1 " << endl << sala1;
	sala3.setNume("Fit Gym");
	sala3.setNrAbonamente(249);
	sala3.setPret(99.99);
	sala3.setZona(zona);
	cout << sala3.getID() << sala3.getNrAbonamente() << sala3.getNume() << sala3.getPret() << sala3.getSauna() << sala3.getZona() << endl;

	Sala* v_sala = new Sala[4];
	int lungime_vector = 4;
	for (int i = 0; i < lungime_vector; i++)
	{
		cout << "Sala " << i + 1 << ": "<<endl;
		cin >> v_sala[i];
		cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	}
	for (int i = 0; i < lungime_vector; i++)
	{
		cout << v_sala[i];
		cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	}
	delete[]v_sala;

	int linii = 2, coloane = 2;
	Sala** m_sala = new Sala * [linii];
	for (int i = 0; i < linii; i++)
		m_sala[i] = new Sala[coloane];

	for (int i = 0; i < linii; i++)
		for (int j = 0; j < coloane; j++)
		{
			cout << "\nCitire sala de pe linia " << i + 1 << " si coloana " << j + 1 << endl;
			cin >> m_sala[i][j];
		}
	for (int i = 0; i < linii; i++)
		for (int j = 0; j < coloane; j++)
		{
			cout << "Afisare sala de pe linia " << i + 1 << " si coloana " << j + 1 << endl;
			cout << m_sala[i][j];
		}
	for (int i = 0; i < linii; i++)
		delete[]m_sala[i];
	delete[]m_sala;
	cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;


	string brandNou = "Muscles";
	int* greutate = new int[1];
	greutate[0] = 150;
	int* greutate2 = new int[2];
	greutate2[0] = 300;
	Scripete scripete1;
	Scripete scripete2(2, "alb", 199.99);
	Scripete scripete3(3, "roz", 299.30, greutate);
	Scripete scripete4;
	Scripete scripete5;
	scripete4 = scripete3;
	cin >> scripete5;
	Scripete::schimbaBrand(brandNou);
	cout << scripete5 << endl;
	scripete4 = scripete2 + scripete3;
	cout << scripete4;
	Scripete* v_scripete = new Scripete[4];
	int lungime_vector = 4;
	for (int i = 0; i < lungime_vector; i++)
	{
		cout << "Scripete " << i + 1 << ": "<<endl;
		cin >> v_scripete[i];
		cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	}
	for (int i = 0; i < lungime_vector; i++)
	{
		cout << v_scripete[i];
		cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	}
	delete[]v_scripete;
	cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;


	int vNou = 60;
	char* producator = new char[strlen("Gymbeam") + 1];
	strcpy_s(producator, strlen("Gymbeam") + 1, "Gymbeam");
	char* producator2 = new char[strlen("MYprotein") + 1];
	strcpy_s(producator2, strlen("MYprotein") + 1, "MYprotein");
	Supliment proteina;
	Supliment creatina(2, 199.5);
	Supliment bcaa(3, 75, "BCAA", producator);
	Supliment::setValabilitate(vNou);
	Supliment creatina2;
	creatina2 = creatina;
	Supliment creatina3;
	Supliment creatina4 = creatina;
	cin >> creatina3;
	cout << creatina[1];
	creatina[1] = 'a';
	cout << creatina;
	Supliment* v_creatina = new Supliment[4];
	int lungime_vector = 4;
	for (int i = 0; i < lungime_vector; i++)
	{
		cout << "Suplimentul " << i + 1 << ": " << endl;
		cin >> v_creatina[i];
		cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	}
	for (int i = 0; i < lungime_vector; i++)
	{
		cout << v_creatina[i];
		cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	}
	delete[]v_creatina;
	cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	cout << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
}
